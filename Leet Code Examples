Two Sum
Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.

 
 
  SOLUTION IN C++
  
  #include<iostream>
#include <bits/stdc++.h>
// Sum of Two Numbers
using namespace std;
int main()
{
    int num;
    int arr[] = {3,4,5,6,7,8,9,11,15};
    //get the value from the user.
    cout<<"enter target : "<<endl;
    cin>>num;
    // method to find the length of the array.
    int length = sizeof(arr)/sizeof(arr[0]);
    //sort the array.
    sort(arr,arr+length);
    int i=0;
    //set the initial value ,and  add it with which the rest of the array values to get the target value 
    while(i<length){
    for(int j=i+1;j<length;j++)
        if(arr[j]+arr[i]==num)
        cout<<i<<","<<j;
        else i++;
        break;
        }
    return 0;





Container With Most Water
Given n non-negative integers a1, a2, ..., an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of the line i is at (i, ai) and (i, 0). Find two lines, which, together with the x-axis forms a container, such that the container contains the most water.

Notice that you may not slant the container.

Input: height = [1,8,6,2,5,4,8,3,7]
Output: 49
Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.


SOLUTION IN C++

#include<iostream>
#include <bits/stdc++.h>
using namespace std;
int maxArea(vector<int> height) {
    int water = 0;
    int i = 0, j = height.size() - 1;
    while (i < j) {
        int h = min(height[i], height[j]);
        water = max(water, (j - i) * h);
        while (height[i] <= h && i < j) i++;
        while (height[j] <= h && i < j) j--;
    }
    return water;
}

int main()
{
vector<int> height{1,8,6,2,5,4,8,3,7};
 cout<<maxArea(height);
 return 0;
    }


   3Sum
  Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2]]

SOLUTION C++


#include<bits/stdc++.h>
using namespace std;

bool Sum3(int arr[],int arr_size)
{
    int j,k;
    sort(arr,arr+arr_size);
    for(int i=0;i<arr_size-2;i++)
    {
        j = i+1;
        k = arr_size-1;
        while(j<k)
        {
            if(arr[i]+arr[j]+arr[k]==0)
            {
                printf("triplets are %d ,%d , %d",arr[i],arr[j],arr[k]);
            return true;
            }
            else if(arr[i]+arr[j]+arr[k]<0)
                j++;
            else
                k--;
        }

    }
    return false;
}
int main()
{
    int arr[] = {-1,0,1,2,-1,-4 };
    int n = sizeof(arr)/sizeof(arr[0]);
    Sum3(arr,n);
    return 0;
}


3Sum Closest

Given an integer array nums of length n and an integer target, find three integers in nums such that the sum is closest to target.

Return the sum of the three integers.

You may assume that each input would have exactly one solution.

 

Example 1:

Input: nums = [-1,2,1,-4], target = 1
Output: 2
Explanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).
Example 2:

Input: nums = [0,0,0], target = 1
Output: 0

SOLUTION C++;

#include<bits/stdc++.h>
using namespace std;
int sum3(vector<int> &arr, int x)
{
    sort(arr.begin(),arr.end());

    int closestsum = 10000000;
    for(int i =0; i<arr.size()-2;i++)
    {
        int j = i+1;
        int k = arr.size()-1;
        while(j<k)
        {
            int sum = arr[i]+arr[j]+arr[k];
            if(abs(1LL*x-sum)<abs(1LL*x-closestsum))
            {

                closestsum = sum;
            }
        if(sum<x)
        {
            k--;
        }
        else
        {
            j++;
        }

    }
    }
    return closestsum;
}
int main()
{
    vector<int>arr = {1,2,-1,-2,3,4};
    int x = 4;
    cout<<sum3(arr,x);
    return 0;
}



 4Sum
 
Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:

0 <= a, b, c, d < n
a, b, c, and d are distinct.
nums[a] + nums[b] + nums[c] + nums[d] == target
You may return the answer in any order.

 

Example 1:

Input: nums = [1,0,-1,0,-2,2], target = 0
Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]


SOLUTION C++

#include<bits/stdc++.h>
using namespace std;

bool sum4(int arr[],int n,int target)
{
    sort(arr,arr+n);
    for(int i=0;i<n-1;i++)
    {
        for(int j=i+1;j<n-2;j++)
        {
            int k = j+1;
            int l = n-1;
            while(k<l)
            {
                if(arr[i]+arr[j]+arr[k]+arr[l]==target)
                {
                    printf("%d,%d,%d,%d",arr[i],arr[j],arr[k],arr[l]);
                    return true;

                }
                else if(arr[i]+arr[j]+arr[k]+arr[l]<target)

                    k++;

                else


                    l--;
                }

            }
        }
        return false;
    }


int main()
{
    int arr[] = {1,0,-1,0,-2,2};
    int n = sizeof(arr)/sizeof(arr[0]);
    int target = 0;
    sum4(arr,n,target);
}



Remove Element from the array

Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. The relative order of the elements may be changed.

Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements.

Return k after placing the final result in the first k slots of nums.

Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.

Example 1:

Input: nums = [3,2,2,3], val = 3
Output: 2, nums = [2,2,_,_]
Explanation: Your function should return k = 2, with the first two elements of nums being 2.
It does not matter what you leave beyond the returned k (hence they are underscores).

SOLUTION C++

#include<bits/stdc++.h>
using namespace std;

int removeElement(int arr[],int n,int l)
{
    int i = 0;
    sort(arr,arr+l);
    while(i<l)
    {
        if(arr[i]==n)
        {
           i++;
        }
        else
        {
            cout<<arr[i]<<"," ;
            i++;
        }
    }
}
int main()
{
    int arr[] = {0,1,1,2,3,2,4,5,6,6};
    int n  =3;
    int l = sizeof(arr)/sizeof(arr[0]);
    removeElement(arr,n,l);
    return 0;
}

