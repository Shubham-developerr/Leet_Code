Two Sum
Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.

 
 
  SOLUTION IN C++
  
  #include<iostream>
#include <bits/stdc++.h>
// Sum of Two Numbers
using namespace std;
int main()
{
    int num;
    int arr[] = {3,4,5,6,7,8,9,11,15};
    //get the value from the user.
    cout<<"enter target : "<<endl;
    cin>>num;
    // method to find the length of the array.
    int length = sizeof(arr)/sizeof(arr[0]);
    //sort the array.
    sort(arr,arr+length);
    int i=0;
    //set the initial value ,and  add it with which the rest of the array values to get the target value 
    while(i<length){
    for(int j=i+1;j<length;j++)
        if(arr[j]+arr[i]==num)
        cout<<i<<","<<j;
        else i++;
        break;
        }
    return 0;





Container With Most Water
Given n non-negative integers a1, a2, ..., an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of the line i is at (i, ai) and (i, 0). Find two lines, which, together with the x-axis forms a container, such that the container contains the most water.

Notice that you may not slant the container.

Input: height = [1,8,6,2,5,4,8,3,7]
Output: 49
Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.


SOLUTION IN C++

#include<iostream>
#include <bits/stdc++.h>
using namespace std;
int maxArea(vector<int> height) {
    int water = 0;
    int i = 0, j = height.size() - 1;
    while (i < j) {
        int h = min(height[i], height[j]);
        water = max(water, (j - i) * h);
        while (height[i] <= h && i < j) i++;
        while (height[j] <= h && i < j) j--;
    }
    return water;
}

int main()
{
vector<int> height{1,8,6,2,5,4,8,3,7};
 cout<<maxArea(height);
 return 0;
    }


   3Sum
  Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2]]

SOLUTION C++


#include<bits/stdc++.h>
using namespace std;

bool Sum3(int arr[],int arr_size)
{
    int j,k;
    sort(arr,arr+arr_size);
    for(int i=0;i<arr_size-2;i++)
    {
        j = i+1;
        k = arr_size-1;
        while(j<k)
        {
            if(arr[i]+arr[j]+arr[k]==0)
            {
                printf("triplets are %d ,%d , %d",arr[i],arr[j],arr[k]);
            return true;
            }
            else if(arr[i]+arr[j]+arr[k]<0)
                j++;
            else
                k--;
        }

    }
    return false;
}
int main()
{
    int arr[] = {-1,0,1,2,-1,-4 };
    int n = sizeof(arr)/sizeof(arr[0]);
    Sum3(arr,n);
    return 0;
}



